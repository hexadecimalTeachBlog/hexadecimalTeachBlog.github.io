<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十六進位 - 技術共筆部落格</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexadecimalteachblog.github.io/"/>
  <updated>2018-07-03T01:41:44.722Z</updated>
  <id>https://hexadecimalteachblog.github.io/</id>
  
  <author>
    <name>十六進位</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>svg -第二章-svg進階基礎(1)</title>
    <link href="https://hexadecimalteachblog.github.io/2018/07/03/svg-%E7%AC%AC%E4%BA%8C%E7%AB%A0-svg%E9%80%B2%E9%9A%8E%E5%9F%BA%E7%A4%8E-1/"/>
    <id>https://hexadecimalteachblog.github.io/2018/07/03/svg-第二章-svg進階基礎-1/</id>
    <published>2018-07-03T01:29:11.174Z</published>
    <updated>2018-07-03T01:41:44.722Z</updated>
    
    <content type="html"><![CDATA[<p>延續上次解到起屁臉大大為我們講解的svg基礎之後，我們就要稍稍進入到一點更進階的基礎了。我們將要瞭解到漸層、模式、文字、變形的進階基礎。大家打開你的編輯器，我們要開始了。</p><h2 id="漸層"><a href="#漸層" class="headerlink" title="漸層"></a>漸層</h2><p>好的首先我先來看看結果吧！</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="NzojzE" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-linearGradient" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/NzojzE/" target="_blank" rel="noopener">svg-linearGradient</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>你會想哇！這是怎麼做，我就來一步步的拆解程式碼吧！</p><p>首先呢！！我們一樣在最外層給他一個svg屬性，定義他是個svg的作用範圍，並給他一個400X400可視區域的大小,</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">'400'</span> <span class="attr">height</span>=<span class="string">'400'</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著放入defs,用來定義裡面的檔案是可以被重複引用的</p><h4 id="linearGradient、radialGradient"><a href="#linearGradient、radialGradient" class="headerlink" title="linearGradient、radialGradient"></a>linearGradient、radialGradient</h4><p>接下來就來到我們的重頭戲，<code>&lt;linearGradient&gt;</code>和<code>&lt;radialGradient&gt;</code>，我們可以用<code>linearGradient</code>來定義一個       <strong>線性漸層</strong>和<code>radialGradient</code>來定義一個<strong>放射狀的漸層</strong>,並需要給<code>linearGradient</code>一個id,id在一個網頁中是唯一的,但是可以被不同元件重複使用。</p><p>要填入<code>&lt;stop&gt;</code>來指定顏色的範圍,<code>&lt;stop&gt;</code>裡面的屬性<code>offset</code>是顏色的節點，使用百分比的設定，<code>stop-color</code>可以設定節點的顏色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">x1</span>=<span class="string">"0%"</span> <span class="attr">y1</span>=<span class="string">"0%"</span> <span class="attr">x2</span>=<span class="string">"0%"</span> <span class="attr">y2</span>=<span class="string">"100%"</span> <span class="attr">gradientUnits</span>=<span class="string">"userSpaceOnUse"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">stop-color</span>=<span class="string">"#eee"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"30%"</span> <span class="attr">stop-color</span>=<span class="string">"#000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"1"</span> <span class="attr">y2</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"30%"</span> <span class="attr">stop-color</span>=<span class="string">"#d00"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"90%"</span> <span class="attr">stop-color</span>=<span class="string">"#fc0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br></pre></td></tr></table></figure><p>並且在<code>&lt;linearGradient&gt;</code>中可以用<strong><em>線性漸層</em></strong>x1,x2,y1,y2、<strong><em>放射狀漸層</em></strong>cx,cy,r,fx,fy來決定漸層色的起點和終點,皆以%為單位,也可以簡略不寫</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"1"</span> <span class="attr">y2</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"30%"</span> <span class="attr">stop-color</span>=<span class="string">"#d00"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"90%"</span> <span class="attr">stop-color</span>=<span class="string">"#fc0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span> <span class="attr">fill</span>=<span class="string">"url(#right)"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"120"</span> <span class="attr">x</span>=<span class="string">"140"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">stroke</span>=<span class="string">"#000"</span>  <span class="attr">fill</span>=<span class="string">"url(#right)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="bKzRQd" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-linearGradient2" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/bKzRQd/" target="_blank" rel="noopener">svg-linearGradient2</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>並且可以使用<strong><em>xlink:href</em></strong>屬性，他可以將漸層的屬性和<code>stop</code>節點的屬性，引入到另一個漸層中，我們就不用在另一個漸層中建立許多<code>stop</code>節點。</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="vrbJEw" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-linearGradient3" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/vrbJEw/" target="_blank" rel="noopener">svg-linearGradient3</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h4 id="radialGradient"><a href="#radialGradient" class="headerlink" title="radialGradient"></a>radialGradient</h4><p>radialGradient和linearGradient大同小異，只是差在radialGradient是一個點向外發散，並且在radialGradient用cx,cy,r來決定漸層位置與大小,這邊的cx,cy,r一樣是百分比或是小數點</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">"Gradient1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">stop-color</span>=<span class="string">"red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">stop-color</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">"Gradient2"</span> <span class="attr">cx</span>=<span class="string">"0.25"</span> <span class="attr">cy</span>=<span class="string">"0.25"</span> <span class="attr">r</span>=<span class="string">"0.25"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">stop-color</span>=<span class="string">"red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">stop-color</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">rx</span>=<span class="string">"15"</span> <span class="attr">ry</span>=<span class="string">"15"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient1)"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"140"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">rx</span>=<span class="string">"15"</span> <span class="attr">ry</span>=<span class="string">"15"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient2)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="bKzraq" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-radialGradient" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/bKzraq/" target="_blank" rel="noopener">svg-radialGradient</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>另一個差異為fx、fy，決定的是漸層的中心點</p><p><img src="https://developer.mozilla.org/@api/deki/files/352/=SVG_Radial_Grandient_Focus_Example.png" alt="svg放射性漸層"></p><p>使用fx、fy可以決定漸層的中心點在哪，呈現光源位置不同的感覺</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">"Gradient2"</span> <span class="attr">cx</span>=<span class="string">".5"</span> <span class="attr">cy</span>=<span class="string">"0.5"</span> <span class="attr">r</span>=<span class="string">"0.5"</span> <span class="attr">fx</span>=<span class="string">'.3'</span> <span class="attr">fy</span>=<span class="string">'.33'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">stop-color</span>=<span class="string">"red"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">stop-color</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="pKGrOL" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-radialGradient-fx,fy" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/pKGrOL/" target="_blank" rel="noopener">svg-radialGradient-fx,fy</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>經過了一連串漸層svg的tag與屬性的修煉，總算可以抵達終點了？</p><p>不不不，等等? 還有兩個重要的屬性，<strong><em>spreadMethod</em></strong>與<strong><em>gradientUnits</em></strong>還沒講到，先喝杯茶，來完成最後兩個屬性吧！</p><h3 id="spreadMethod"><a href="#spreadMethod" class="headerlink" title="spreadMethod"></a>spreadMethod</h3><p>spreadMethod指的是漸層的擴散方式，分成了pad、reflect、repeat這三種方式，pad就是按照預設的方式擴散、reflect就是鏡射、repeat就是重複，我們來看看效果如何吧！<br>spreadMethod經過測試似乎只在radialGradient有效果</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="gKqGMx" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-radialGradient-spreadMethod" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/gKqGMx/" target="_blank" rel="noopener">svg-radialGradient-spreadMethod</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h3 id="gradientUnits"><a href="#gradientUnits" class="headerlink" title="gradientUnits"></a>gradientUnits</h3><h4 id="gradientUnits是用來表示漸層是套用在哪個定位上，objectBoundingBox是預設值，表示套用在要顯示漸層的物件上，而userSpaceOnUse表示套用在整個svg的可視區域上-以下為範例可以看看。"><a href="#gradientUnits是用來表示漸層是套用在哪個定位上，objectBoundingBox是預設值，表示套用在要顯示漸層的物件上，而userSpaceOnUse表示套用在整個svg的可視區域上-以下為範例可以看看。" class="headerlink" title="gradientUnits是用來表示漸層是套用在哪個定位上，objectBoundingBox是預設值，表示套用在要顯示漸層的物件上，而userSpaceOnUse表示套用在整個svg的可視區域上,以下為範例可以看看。"></a>gradientUnits是用來表示漸層是套用在哪個定位上，objectBoundingBox是預設值，表示套用在要顯示漸層的物件上，而userSpaceOnUse表示套用在整個svg的可視區域上,以下為範例可以看看。</h4><h4 id="linearGradient套用gradientUnits-”userSpaceOnUse”後，整個漸層渲染從svg位置-0-0-的地方往下延伸，所以y1-”300”代表從可視區域300px的，地方開始漸層才看得見，對比原本在物件上的漸層只要設定1即為100-即可完全顯示漸層。"><a href="#linearGradient套用gradientUnits-”userSpaceOnUse”後，整個漸層渲染從svg位置-0-0-的地方往下延伸，所以y1-”300”代表從可視區域300px的，地方開始漸層才看得見，對比原本在物件上的漸層只要設定1即為100-即可完全顯示漸層。" class="headerlink" title="linearGradient套用gradientUnits=”userSpaceOnUse”後，整個漸層渲染從svg位置(0,0)的地方往下延伸，所以y1=”300”代表從可視區域300px的，地方開始漸層才看得見，對比原本在物件上的漸層只要設定1即為100%即可完全顯示漸層。"></a>linearGradient套用gradientUnits=”userSpaceOnUse”後，整個漸層渲染從svg位置(0,0)的地方往下延伸，所以y1=”300”代表從可視區域300px的，地方開始漸層才看得見，對比原本在物件上的漸層只要設定1即為100%即可完全顯示漸層。</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"GradientLeft"</span> <span class="attr">x1</span>=<span class="string">""</span> <span class="attr">x2</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"300"</span> <span class="attr">y2</span>=<span class="string">"0"</span> <span class="attr">gradientUnits</span>=<span class="string">"userSpaceOnUse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">id</span>=<span class="string">"stop1"</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">stop-color</span>=<span class="string">'#000'</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stop</span> <span class="attr">id</span>=<span class="string">"stop2"</span> <span class="attr">offset</span>=<span class="string">"50%"</span> <span class="attr">stop-color</span>=<span class="string">'#b00'</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">stop</span> <span class="attr">id</span>=<span class="string">"stop3"</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">stop-color</span>=<span class="string">'#cc0'</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="PaVOJL" data-default-tab="html,result" data-user="josephwu" data-embed-version="2" data-pen-title="svg-linearGradient-gradientUnits" class="codepen">See the Pen <a href="https://codepen.io/josephwu/pen/PaVOJL/" target="_blank" rel="noopener">svg-linearGradient-gradientUnits</a> by JosephWu (<a href="https://codepen.io/josephwu" target="_blank" rel="noopener">@josephwu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>參考資料<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">MDN SVG教學</a><br><a href="http://www.oxxostudio.tw/articles/201410/svg-tutorial.html" target="_blank" rel="noopener">SVG 完整教學 31 天</a><br><a href="https://wcc723.github.io/svg/2014/06/05/svg-linear-gradient/" target="_blank" rel="noopener">卡斯伯-SVG 漸層沒想到是這樣的做法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;延續上次解到起屁臉大大為我們講解的svg基礎之後，我們就要稍稍進入到一點更進階的基礎了。我們將要瞭解到漸層、模式、文字、變形的進階基礎。大家打開你的編輯器，我們要開始了。&lt;/p&gt;
&lt;h2 id=&quot;漸層&quot;&gt;&lt;a href=&quot;#漸層&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="svg" scheme="https://hexadecimalteachblog.github.io/categories/svg/"/>
    
    
      <category term="svg" scheme="https://hexadecimalteachblog.github.io/tags/svg/"/>
    
      <category term="Joseph" scheme="https://hexadecimalteachblog.github.io/tags/Joseph/"/>
    
  </entry>
  
  <entry>
    <title>精神時光屋第三周 AdminOrder 心得</title>
    <link href="https://hexadecimalteachblog.github.io/2018/06/24/%E7%B2%BE%E7%A5%9E%E6%99%82%E5%85%89%E5%B1%8B%E7%AC%AC%E4%B8%89%E5%91%A8-AdminOrder-%E5%BF%83%E5%BE%97/"/>
    <id>https://hexadecimalteachblog.github.io/2018/06/24/精神時光屋第三周-AdminOrder-心得/</id>
    <published>2018-06-24T11:25:46.000Z</published>
    <updated>2018-07-03T01:29:11.175Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="Week-3-AdminOrder"><a href="#Week-3-AdminOrder" class="headerlink" title="Week 3: AdminOrder"></a><center>Week 3: AdminOrder</center></h2><center>管理後台</center><p><a href="https://hexschool.github.io/THE_F2E_Design/week3-admin%20order/" target="_blank" rel="noopener">第三週設計稿</a></p><p><a href="https://wizardgreen.github.io/hexSchool-TheF2E-Showcase/#/week3" target="_blank" rel="noopener">完成作品連結</a></p><p>以活動條件來說，我是達標了，但以我自己的要求來說，本週是徹徹底底的大失敗，覺得有點小難過 Orz. 不過這次題目的難度一口氣上升一大截，應該很多人都沒辦法在時間內完全攻略這次的題目。特別是 API 的部分，到底要去哪裡找可以涵蓋這麼多東西的 API 勒 ＱＱ</p><p>最後我打算交出 CSS 達成最基本條件就好，但在交出前看著我用的三個主色，突然靈機一動，<br>馬上找 Github API 串起來把首頁做成三大 SPA 框架的 Star 比較圖 XD不過太臨時了沒辦法弄完，還是有點可惜，如果能再加上 commit 紀錄 與 star 走勢圖那就更棒了！</p><h2 id="自我學習項目"><a href="#自我學習項目" class="headerlink" title="自我學習項目"></a><center>自我學習項目</center></h2><ul><li><a href="https://vuetifyjs.com/en/" target="_blank" rel="noopener">Vuetify</a> - 挑戰失敗</li></ul><p>Material Design 風格的 Vue 外觀框架其實蠻多的， Vuetify 在我看來是比較脫穎而出的一款，不論維護或社群互動都有一定的熱度，我也早在去年就持續官網這款套件。但實際寫起來覺得 Document 不怎麼好上手，彈性也不是很高，特別是排版設定上會使 HTML 的標籤層數過於複雜，何況我還是用 Pug 來撰寫的，換回原生 HTML 可能對我來說會是一場災難。<br>會歸類為失敗主要是因為 style 嚴重覆蓋了我原先寫好的作品…</p><p><center><img src="https://i.imgur.com/PZeDAFb.png"></center><br>看來我還是以後有其他全新專案再來玩玩看這些潮到出水的 Material Design 吧 ＱＱ</p><p><br></p><ul><li><a href="http://www.chartjs.org/" target="_blank" rel="noopener">Chart.js</a></li></ul><p>聞名已久的圖表套件，官網配色實在太美拉，美到我就直接決定用他的色系作為這週作品的色調。套件本身的功能也很好上手!只要在 HTML 上放個 Canvas ，再把資料套上去就完工了～</p><p>以我這次題目的圖表來說，只要下方的 code 就能輕鬆達成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 選擇要哪種類型的圖表</span></span><br><span class="line">type: <span class="string">'line'</span>,</span><br><span class="line">chartData: &#123;</span><br><span class="line">  <span class="comment">// 標籤資料，作為圖表下方的對照資訊</span></span><br><span class="line">  labels: [<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>, <span class="string">'June'</span>, <span class="string">'July'</span>, <span class="string">'August'</span>, <span class="string">'September'</span>, <span class="string">'October'</span>, <span class="string">'November'</span>, <span class="string">'December'</span>],</span><br><span class="line">  datasets: [</span><br><span class="line">    <span class="comment">// 資料組，也就是要視覺化的資料，我總共做了三組，所以就只 show 一個</span></span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Vue'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'rgba(81, 192, 191, .6)'</span>,</span><br><span class="line">      borderColor: <span class="string">'rgba(81, 192, 191)'</span>,</span><br><span class="line">      borderWidth: <span class="string">'1px'</span>,</span><br><span class="line">      data: [<span class="number">40</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">39</span>, <span class="number">25</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>是不是很簡單rrrr，我也好興奮啊啊啊！<br><a href="http://www.chartjs.org/samples/latest/" target="_blank" rel="noopener">官網</a>也提供了好多不同的範本，不只圖表，也可以利用各種數據作出炫砲的效果!</p><p><br></p><ul><li><a href="https://github.com/apertureless/vue-chartjs" target="_blank" rel="noopener">Vue-chart.js</a></li></ul><p>我沒有事先作太多功課，就直接挑了這款在 github 上星星比較多的套件。顧名思義，就是以 chart.js 為底，製作成 Vue 的元件來反覆使用，不過建議還是先把 Chart.js 給弄懂再來搭配這個套件，才不會在 documnet 卡太久。</p><p><br></p><ul><li><a href="https://github.com/marak/Faker.js/" target="_blank" rel="noopener">Faker.js</a></li></ul><p>又是一個簡易又強大的套件，提供了非常多樣化的 API 能夠幫前端生出許多假資料，如此一來前端就可以不需要串接資料就能呈現網站囉。如果覺得麻煩，也有特定的 API 可以產生一整組的 userCard 或其他常見的資料類型，非常直得一學。</p><p><br></p><ul><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">JSON Sever</a></li></ul><p>將 JSON 模擬成伺服器，也就是說只要有 JSON 檔，就算後端提供的 API 壞掉了，也可以直接撰寫 AJAX 模擬與伺服器串接。如果再搭配前面的 Faker.js ，更是如虎添翼啊！ <del>誰還需要後端</del> 這種想法姆湯姆湯…</p><p><br></p><ul><li><a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a></li></ul><p>發現 Vuetify 沒辦法套用在作品上之後，我隨即找上了這款套件，Element 應該是中國目前 Vue 社群內最大宗的外觀套件了，外觀風格中規中局，整體來說都算優秀。但是 document 非常平易近人，我到最後三天整個打掉重做，最後還能趕上交件，這麼容易上手又不會有什麼錯誤，難怪能成為目前最主流的外觀套件。</p><p><br></p><h2 id="第三週感想"><a href="#第三週感想" class="headerlink" title="第三週感想"></a><center>第三週感想</center></h2><p>這週真是跌跌撞撞的，時而氣餒時而興奮 (情緒這麼極端，是小孩子嗎XD)<br>我原本在上週就打算學 Element 快速搭建這次作品的輪廓，但實在受不了 Material Design 潮到不行的風格而跑去學 Vuetify，好不容易啃了很難理解的文件，結果卻遇到相容信的死胡同，繞了一大圈又打掉重做，好險 Element 基本上跟 Bootstrap 一樣平易近人，挽救了整個局面。</p><p>可惜這週在 TypeScript 上並沒有太多的進步，也沒有其他更深入的 JS 學習。取而代之的，我學了許多小型套件，還有超棒的 Chart.js！這讓我更期待再過一陣子要跟<a href="https://hexadecimalteachblog.github.io/">十六進位</a>的夥伴們一起學習得 D3.js 了！</p><p>我發現隨著活動作品越來越多， Vuex store 也漸漸龐大起來，我應該需要花點心思整理一下檔案結構，希望下週我能讀上幾篇相關的討論，並且整理出自己最合適的方法。如果時間允許的話，我也想要把<code>vue-property-decorator</code>納入專案中，能夠使用很酷的 Decorator 來撰寫 prop、watch 等功能，簡單了解一下，雖然不是官方開發的套件，但似乎在社群的推薦度是蠻高的，真令人期待。</p><h2 id="其他連結"><a href="#其他連結" class="headerlink" title="其他連結"></a><center>其他連結</center></h2><ul><li><a href="https://github.com/Wizardgreen/hexSchool-TheF2E-Showcase/" target="_blank" rel="noopener">Github 原始碼</a></li><li><a href="https://wizardgreen.github.io/hexSchool-TheF2E-Showcase/#/" target="_blank" rel="noopener">F2E 作品展示台</a></li><li><a href="https://wizardgreen.github.io/Blog/" target="_blank" rel="noopener">本文同步發表於我的個人筆記</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Week-3-AdminOrder&quot;&gt;&lt;a href=&quot;#Week-3-AdminOrder&quot; class=&quot;headerlink&quot; title=&quot;Week 3: AdminOrder&quot;&gt;&lt;/a&gt;&lt;center&gt;Week 3: AdminO
      
    
    </summary>
    
      <category term="TheF2E" scheme="https://hexadecimalteachblog.github.io/categories/TheF2E/"/>
    
    
      <category term="Wizardgreen" scheme="https://hexadecimalteachblog.github.io/tags/Wizardgreen/"/>
    
  </entry>
  
  <entry>
    <title>精神時光屋第二周 Filter 心得</title>
    <link href="https://hexadecimalteachblog.github.io/2018/06/18/%E7%B2%BE%E7%A5%9E%E6%99%82%E5%85%89%E5%B1%8B%E7%AC%AC%E4%BA%8C%E5%91%A8-Filter-%E5%BF%83%E5%BE%97/"/>
    <id>https://hexadecimalteachblog.github.io/2018/06/18/精神時光屋第二周-Filter-心得/</id>
    <published>2018-06-18T03:01:53.000Z</published>
    <updated>2018-07-03T01:29:11.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Week-2-Filter"><a href="#Week-2-Filter" class="headerlink" title="Week 2: Filter"></a><center>Week 2: Filter</center></h2><center>獨立音樂活動查詢站</center><p><a href="https://hexschool.github.io/THE_F2E_Design/week2-filter/" target="_blank" rel="noopener">第二週設計稿</a></p><p><a href="https://wizardgreen.github.io/hexSchool-TheF2E-Showcase/#/week2" target="_blank" rel="noopener">完成作品連結</a></p><p>屁孩如我在讀書會中誇下海口說這週要一口氣學會 TypeScript &amp; Vuex 並且運用在這週的挑戰項目上面！！！ …..隔兩天表示放棄。也不是說學不好，而是我花了兩天時間都沒辦法把 TypeScript 加入我現行的 VueCLI 3.0 專案中，但是如果是從頭建立則毫無問題，判斷起來應該是我有一些底層的 webpack 與 vue-loader 知識需要加強，所以我又追加幾個小項目，而 TS …next time, baby.</p><center><img src="https://i.imgur.com/ZRFhtWw.gif"></center><br><br><br><br>## <center>自我學習項目</center><ul><li><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a><br>Axios… 這個名字實在有夠帥，光聽名字就知道是一個很強的工具(Ｘ)，在去年剛投入前端早就耳聞過很多次這個用來處理 AJAX 的套件( ajax…喔，聽起來也很帥，但一直拖到現在我才真的開始拿來實作到自己的專案上，除了方便以外沒有別的形容詞，誰會想記傳統霹哩啪拉一坨的 xhr 發送步驟啦。</p></li><li><p><a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">vue-class-component</a><br>Vue 官方維護的生態套件之一，能夠把用傳統 Object 的方式改成使用潮到出水的 ES6 Class 來製作元件，除此之外也能夠簡化許多寫法。如此一來寫法會比較接近 React，因此不建議新手使用。</p></li><li><p><a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex</a><br>Vuex 單向資料流工具，太知名了不解釋，我竟然拖到這麼晚才學。</p></li><li><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> - 挑戰失敗<br>原本是本週的重點，TS 類似於 scss 或 pug 這些預處理器，但 TS 的目的不是為了減化 JavaScript 的寫法，TS 算是一種保險措施，使得原本屬於弱型別/動態型別的 JS 轉變為強型別/靜態型別，雖然會因為要額外寫資料規則而稍微增加時間成本，但以大型專案的除錯與維護的角度來看，TS 必定能帶來大量好處。<br><br></p></li></ul><h2 id="第二週感想"><a href="#第二週感想" class="headerlink" title="第二週感想"></a><center>第二週感想</center></h2><p>我把這次主題的 API 改成查詢獨立音樂，這其實是背後有一點小故事的私心舉動，但過去的事情就讓它過去吧。一直以來我對自己的要求都很高，也可以說我實在不是一個會拿捏自我乘載量的人，每次的往自己身上碟滿東西，然後很憤世忌俗的把一切做完，感覺很爽但心情又有點複雜ＸＤ本週幾乎是從零開始的自己搞，搞得都壓線才完成作品，又放掉了我美好的 TypeScript..QQ</p><p>接下來的作品應該會先用 Element 快速建立雛型，然後再專心學好該週的自我要求項目，總是要有點進步嘛。</p><h2 id="其他連結"><a href="#其他連結" class="headerlink" title="其他連結"></a><center>其他連結</center></h2><ul><li><a href="https://github.com/Wizardgreen/hexSchool-TheF2E-Showcase/" target="_blank" rel="noopener">Github 原始碼</a></li><li><a href="https://wizardgreen.github.io/hexSchool-TheF2E-Showcase/#/" target="_blank" rel="noopener">F2E 作品展示台</a></li><li><a href="https://wizardgreen.github.io/Blog/" target="_blank" rel="noopener">本文同步發表於我的個人筆記</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Week-2-Filter&quot;&gt;&lt;a href=&quot;#Week-2-Filter&quot; class=&quot;headerlink&quot; title=&quot;Week 2: Filter&quot;&gt;&lt;/a&gt;&lt;center&gt;Week 2: Filter&lt;/center&gt;&lt;/h2&gt;&lt;center&gt;獨立
      
    
    </summary>
    
      <category term="TheF2E" scheme="https://hexadecimalteachblog.github.io/categories/TheF2E/"/>
    
    
      <category term="Wizardgreen" scheme="https://hexadecimalteachblog.github.io/tags/Wizardgreen/"/>
    
  </entry>
  
  <entry>
    <title>svg -第一章-認識svg</title>
    <link href="https://hexadecimalteachblog.github.io/2018/06/14/svg-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AA%8D%E8%AD%98svg/"/>
    <id>https://hexadecimalteachblog.github.io/2018/06/14/svg-第一章-認識svg/</id>
    <published>2018-06-14T07:22:15.000Z</published>
    <updated>2018-07-03T01:41:42.797Z</updated>
    
    <content type="html"><![CDATA[<p>相信各位在學習前端的路上一定都對svg這個名詞不陌生<br>最基礎的就是在logo不使用png,而使用svg的方式了</p><p>但我們要來開始了解svg</p><p>什麼是svg?<br>他能夠做什麼?</p><p>他是一種針對能讓網頁呈現向量圖的一種<a href="https://developer.mozilla.org/en-US/docs/XML_introduction" target="_blank" rel="noopener">xml</a>的語言<br>講到向量圖，就不得不介紹一下向量圖跟點陣圖的差異了</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Bitmap_VS_SVG.svg/1200px-Bitmap_VS_SVG.svg.png" width="300"></p><p>透過上圖，我們可以很清楚明白的了解到，左側的唯一般的點陣圖，他是由 “點” 所組成的<br>右側的向量圖，他是由一種數學運算的方式紀錄圖片內容，也就是說，他沒有解析度的概念<br>可以隨意地縮放圖片的尺寸</p><p>它還有什麼優點?</p><p>1.它在裡面還可以在塞圖片，如jpg svg等等<br>2.可以有文字物件<br>3.可以被用DOM來抓取，做一些動畫等等<br>4.圖層的觀念，寫後面的code屬性會蓋在前一層上</p><h3 id="有了對svg有個基礎的認識之後，讓我們繼續吧"><a href="#有了對svg有個基礎的認識之後，讓我們繼續吧" class="headerlink" title="有了對svg有個基礎的認識之後，讓我們繼續吧"></a>有了對svg有個基礎的認識之後，讓我們繼續吧</h3><svg version="1.1" baseprofile="full" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="blue"/><text x="50%" y="60%" font-size="30" text-anchor="middle" fill="white">我是SVG</text></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">baseProfile</span>=<span class="string">"full"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"60%"</span> <span class="attr">font-size</span>=<span class="string">"30"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">fill</span>=<span class="string">"white"</span>&gt;</span>我是SVG<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到上面的code</p><p>我們可以看到 我們用svg的標籤把我們所需要的東西全部都包起來</p><p>然後我們使用了version 去定義了svg版本為1.1</p><p>然後用<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/baseProfile" target="_blank" rel="noopener">baseProfile=full</a>去定義了了我們所需要的配置</p><p>又定義了<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course" target="_blank" rel="noopener">xmlns=”http://www.w3.org/2000/svg”</a>這個命名空間</p><p>以上這些，雖然不寫也沒差，不過根據MDN的文件，保險起見，還是定義一下</p><p>做完上述，我們可以把它存成image.svg，然後可使用object、iframe、img、或css裡的background-image引用，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"image.svg"</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"image.svg"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"image.svg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="了解svg的定位系統"><a href="#了解svg的定位系統" class="headerlink" title="了解svg的定位系統"></a>了解svg的定位系統</h3><p>svg是使用座標系統來定位的</p><p>剛剛上面的範例可以看的到，我下了X及Y這兩種屬性，來去定位它的位置</p><p><img src="https://developer.mozilla.org/@api/deki/files/78/=Canvas_default_grid.png" alt="svg網格"></p><p>讓我們繼續看下去</p><svg version="1.1" baseprofile="full" xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewbox="0 0 100 100"><rect x="20" y="20" width="100" height="100" fill="blue"/></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">baseProfile</span>=<span class="string">"full"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>從上面的例子中 我們開了一個200X200的畫布<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">...</span></span></span><br></pre></td></tr></table></figure></p><p>又使用了rectˊ這個標籤，在svg裡面就是方塊的標籤，x,y起點為20，寬跟高為100像素，並用fill這個屬性填滿藍色<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"blue"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>這時候一定會問說，阿為什麼右鍵檢查明明就200*200，騙我</p><p>因為我們使用了viewBox這個屬性</p><p>x跟y起點為0，開了100 X 100的區域，被放到 200 X 200的畫布上，所以就有放大兩倍的效果</p><p><a href="https://codepen.io/" target="_blank" rel="noopener">打開你的codepen玩玩看R</a></p><h3 id="剛剛都講到了fill，讓我們來填充它吧"><a href="#剛剛都講到了fill，讓我們來填充它吧" class="headerlink" title="剛剛都講到了fill，讓我們來填充它吧!"></a>剛剛都講到了fill，讓我們來填充它吧!</h3><h4 id="填充與邊框屬性"><a href="#填充與邊框屬性" class="headerlink" title="填充與邊框屬性"></a>填充與邊框屬性</h4><p>fill屬性我們剛剛已經知道了 就一個fill=”你要什麼顏色就填什麼”</p><p>然後我們可以透過fill-opacity=”0.5” 來去調整它的透明度</p><svg version="1.1" baseprofile="full" xmlns="http://www.w3.org/2000/svg"><text x="40" y="40" width="100" height="100">這種若隱若現的感覺</text><rect x="20" y="20" width="100" height="100" fill="blue" fill-opacity="0.5"/></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"40"</span> <span class="attr">y</span>=<span class="string">"40"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span>這種若隱若現的感覺<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">fill</span>=<span class="string">"blue"</span> <span class="attr">fill-opacity</span>=<span class="string">"0.5"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>邊框stroke屬性</p><svg version="1.1" baseprofile="full" xmlns="http://www.w3.org/2000/svg"><rect width="100" height="100" stroke-width="5" stroke="blue" fill="#07B492"/></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">stroke-width</span>=<span class="string">5</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> <span class="attr">fill</span>=<span class="string">"#07B492"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>從上述的利子可以看到，我們建立了一個5px寬的藍色邊框</p><p>storke=”你要什麼顏色”</p><p>storke-width=”你要多寬”</p><p>繪製邊框當然不只這些屬性</p><svg width="160" height="280" xmlns="http://www.w3.org/2000/svg" version="1.1"><polyline points="40 60 80 20 120 60" stroke="black" stroke-width="20" stroke-linecap="butt" fill="none" stroke-linejoin="miter"/><polyline points="40 140 80 100 120 140" stroke="black" stroke-width="20" stroke-linecap="round" fill="none" stroke-linejoin="round"/><polyline points="40 220 80 180 120 220" stroke="black" stroke-width="20" stroke-linecap="square" fill="none" stroke-linejoin="bevel"/></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"40 60 80 20 120 60"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-linecap</span>=<span class="string">"butt"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"miter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"40 140 80 100 120 140"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"40 220 80 180 120 220"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">stroke-linecap</span>=<span class="string">"square"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"bevel"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>這邊有三個一樣長的線段<br>stroke-linecap 控制終點的形狀(看左右兩頭) 提供三種屬性: butt round square</p><p>butt就是已跟線的終點一樣長的邊框(切齊)，這個是預設，如果你要這樣的話不寫也沒差</p><p>round 提供以圓角形式來做結束</p><p>square 跟 butt 差不多，但是稍微長一點</p><p>stroke-linejoin 屬性，用來控制兩條邊框線段之間，用什麼方式連接。(看轉角的地方)</p><p>一樣有三種屬性: miter round bevel</p><p>miter 直角(預設)<br>round 圓角<br>bevel 轉角為斜切</p><p>當然 我們更進一步 可以將邊框變成你想要的虛線</p><svg width="200" height="150" xmlns="http://www.w3.org/2000/svg" version="1.1"><path d="M 10 75 Q 50 10 100 75 T 190 75" stroke="black" stroke-linecap="round" stroke-dasharray="5,10,5" fill="none"/></svg><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">...</span> <span class="attr">stroke-dasharray</span>=<span class="string">"5,10,5"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到說 這個stroke-dasharray的方法就是 </p><p>第一個數字為5px實線，緊接著10px的空白，然後又接著5px的實線，用逗號來做分隔，然後一直循環</p><p>所以它的寫法為<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">...</span> <span class="attr">stroke-dasharray</span>=<span class="string">"實線,空白,實線 ...."</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>當然，如果你想寫更複雜的虛線，你可以在後面繼續延伸下去</p><h3 id="讓我們用CSS來操作它吧"><a href="#讓我們用CSS來操作它吧" class="headerlink" title="讓我們用CSS來操作它吧!"></a>讓我們用CSS來操作它吧!</h3><p>在CSS裡 我們要怎麼對svg做操作呢?</p><p>我們要使用我們剛剛上面所說的一切屬性來對它做操作<br>它的標籤就跟你平常在寫有點不一漾</p><p><style>#MyRect { stroke: black; fill: red; } #MyRect:hover,#MyRect:focus{stroke: blue; fill: green;}</style><svg width="200" height="200" xmlns="http://www.w3.org/2000/svg" version="1.1"><rect x="10" height="180" y="10" width="180" id="MyRect"/><text x="60" y="100" fill="white">滑鼠過我看看</text></svg></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#MyRect &#123; </span></span><br><span class="line"><span class="undefined">  stroke: black; </span></span><br><span class="line"><span class="undefined">  fill: red; </span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">#MyRect:hover,</span></span><br><span class="line"><span class="undefined">#MyRect:focus&#123;</span></span><br><span class="line"><span class="undefined">  stroke: blue; </span></span><br><span class="line"><span class="undefined">  fill: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"180"</span> <span class="attr">id</span>=<span class="string">"MyRect"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">60</span> <span class="attr">y</span>=<span class="string">100</span> <span class="attr">fill</span>=<span class="string">"white"</span>&gt;</span>滑鼠過我看看<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，我們遵循著svg的規範，去製作我們想要的任何效果</p><p>如果你已經會了CSS跟HTML，相信這對你來說並沒有太大的難度</p><p>今天的介紹介到這裡，我們下次見d(`･∀･)b</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信各位在學習前端的路上一定都對svg這個名詞不陌生&lt;br&gt;最基礎的就是在logo不使用png,而使用svg的方式了&lt;/p&gt;
&lt;p&gt;但我們要來開始了解svg&lt;/p&gt;
&lt;p&gt;什麼是svg?&lt;br&gt;他能夠做什麼?&lt;/p&gt;
&lt;p&gt;他是一種針對能讓網頁呈現向量圖的一種&lt;a href
      
    
    </summary>
    
      <category term="svg" scheme="https://hexadecimalteachblog.github.io/categories/svg/"/>
    
    
      <category term="解到起屁臉" scheme="https://hexadecimalteachblog.github.io/tags/%E8%A7%A3%E5%88%B0%E8%B5%B7%E5%B1%81%E8%87%89/"/>
    
      <category term="svg" scheme="https://hexadecimalteachblog.github.io/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>精神時光屋第一周 todolist 心得</title>
    <link href="https://hexadecimalteachblog.github.io/2018/06/11/%E7%B2%BE%E7%A5%9E%E6%99%82%E5%85%89%E5%B1%8B%E7%AC%AC%E4%B8%80%E5%91%A8-todolist-%E5%BF%83%E5%BE%97/"/>
    <id>https://hexadecimalteachblog.github.io/2018/06/11/精神時光屋第一周-todolist-心得/</id>
    <published>2018-06-11T02:24:28.000Z</published>
    <updated>2018-07-03T01:29:11.175Z</updated>
    
    <content type="html"><![CDATA[<p>不囉嗦先來看網址<br><a href="https://protected-reaches-93253.herokuapp.com/" target="_blank" rel="noopener">成果</a><br><a href="https://github.com/aiko3310/The-F2E-week1-todolist" target="_blank" rel="noopener">github</a></p><p>在進度裡這次使用到的有 react, styled-components, react-router, material-ui</p><p>我自己在這禮拜寫是挺趕的，從周四才開始寫</p><p>畢竟也是第一次實戰react，有很多地方不是很熟，覺得只是copy+paste的程度而已</p><p>不過在做的時候發現使用Styled-components更多彈性的作法</p><p>使得每一個Component都可以提供更多的彈性</p><p>例如</p><p><code>margin:0 0 0 20px</code></p><p>改寫成</p><p><code>margin:${props=&gt;props.mg || &quot;initial&quot;}</code></p><p>這樣寫就能更在jsx標籤裡使用mg這個方法 只要指定mg=”屬性值” 就可以隨時調整magin的值了</p><p>另外material-ui在date-picker上居然不支援safiri!!!!</p><p>雖然我還是繼續用就是了</p><p>本來安排的進度還有用mobx做狀態的管理，無奈技術力還不足，無法了解mobx的寫法</p><p>期待之後再慢慢補上了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不囉嗦先來看網址&lt;br&gt;&lt;a href=&quot;https://protected-reaches-93253.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成果&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="TheF2E" scheme="https://hexadecimalteachblog.github.io/categories/TheF2E/"/>
    
    
      <category term="解到起屁臉" scheme="https://hexadecimalteachblog.github.io/tags/%E8%A7%A3%E5%88%B0%E8%B5%B7%E5%B1%81%E8%87%89/"/>
    
      <category term="react" scheme="https://hexadecimalteachblog.github.io/tags/react/"/>
    
      <category term="styled-components" scheme="https://hexadecimalteachblog.github.io/tags/styled-components/"/>
    
  </entry>
  
</feed>
